{"ast":null,"code":"const clientId = '2c422fcf64dd4d99ae2bf0df0ae94d71';\nconst redirectUri = 'http://localhost:3000/';\nlet accessToken;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } //check for token match\n\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]); //This clears the parameters, allowing us to grab a new access token when it expires.\n\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      } else {\n        return jsonResponse.tracks.items.map(track => ({\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri\n        }));\n      }\n    });\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userId;\n    return fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(response => response.json()).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({\n            uris: trackUris\n          })\n        });\n      });\n    });\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["/home/vickstar/Desktop/React_app/react-project/Sangeet/src/util/Spotify.js"],"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris"],"mappings":"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","sourcesContent":["const clientId = '2c422fcf64dd4d99ae2bf0df0ae94d71';\nconst redirectUri = 'http://localhost:3000/';\n\nlet accessToken; \n\nconst Spotify = {\n    getAccessToken(){\n        if(accessToken){\n            return accessToken;\n        }\n            //check for token match\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n        \n        \n        if (accessTokenMatch && expiresInMatch ){\n            accessToken = accessTokenMatch[1];\n            const expiresIn = Number(expiresInMatch[1]);\n\n            //This clears the parameters, allowing us to grab a new access token when it expires.\n\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/' );\n            return accessToken;\n\n        }\n\n        else{\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n            window.location = accessUrl;\n        }\n\n\n    },\n\n    search(term){\n        const accessToken = Spotify.getAccessToken();\n\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,\n        {headers: {\n            Authorization: `Bearer ${accessToken}`\n        }\n    }).then(response => {\n        return response.json();\n    }).then(jsonResponse => {\n     if (!jsonResponse.tracks){\n         return [];\n     }\n     else {\n         return jsonResponse.tracks.items.map(track => ({\n            id: track.id,\n            name: track.name,\n            artist: track.artists[0].name,\n            album: track.album.name,\n            uri: track.uri\n         }));\n     }\n\n\n    });\n    },\n\n    savePlaylist(name,trackUris){\n            if(!name || !trackUris.length){\n                    return; \n            }\n\n            const accessToken = Spotify.getAccessToken();\n            const headers = { Authorization: `Bearer ${accessToken}`};\n            let userId;\n\n            return fetch('https://api.spotify.com/v1/me', { headers: headers }\n            ).then(response => response.json()\n            ).then(jsonResponse => {\n                userId = jsonResponse.id;\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,\n                {\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({ name: name })\n                }\n                ).then(response => response.json()\n                ).then(jsonResponse => {\n                    const playlistId = jsonResponse.id;\n                    return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`,\n                    {\n                        headers: headers,\n                        method: 'POST',\n                        body: JSON.stringify({ uris: trackUris })\n                    }\n                    )\n                }) \n            })\n\n\n    }\n\n};\n\n\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}